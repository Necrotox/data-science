import joblib
import pandas as pd

from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.model_selection import cross_val_score
from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.compose import ColumnTransformer

from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
import pickle

pickle_filename = "pickle-file_30.pickle"


columns_to_drop = [
        'id',
        'url',
        'region',
        'region_url',
        'price',
        'manufacturer',
        'image_url',
        'description',
        'posting_date',
        'lat',
        'long'
    ]
df = pd.read_csv('30.6 homework.csv')

q25 = df['year'].quantile(0.25)
q75 = df['year'].quantile(0.75)
iqr = q75 - q25
boundaries = (q25 - 1.5 * iqr, q75 + 1.5 * iqr)
df.loc[df['year'] < boundaries[0], 'year'] = round(boundaries[0])
df.loc[df['year'] > boundaries[1], 'year'] = round(boundaries[1])

def short_model(x):
    if not pd.isna(x):
        return x.lower().split(' ')[0]
    else:
        return x

df['short_model'] = df['model'].apply(short_model)
df['age_category'] = df['year'].apply(lambda x: 'new' if x > 2013 else ('old' if x < 2006 else 'average'))

numerical = df.select_dtypes(include=['int64', 'float64']).columns
categorical = df.select_dtypes(include=['object']).columns

numerical_transformer = Pipeline(steps=[
        ('imputer', SimpleImputer(strategy='median')),
        ('scaler', StandardScaler())
])

categorical_transformer = Pipeline(steps=[
        ('imputer', SimpleImputer(strategy='most_frequent')),
        ('encoder', OneHotEncoder(handle_unknown='ignore'))
])

preprocessor = ColumnTransformer(transformers=[
        ('numerical', numerical_transformer, numerical),
        ('categorical', categorical_transformer, categorical)
])

df.drop(columns_to_drop, axis=1)

X = df.drop('price_category', axis=1)
y = df['price_category']

models = (
        LogisticRegression(solver='liblinear'),
        RandomForestClassifier(),
        SVC()
)

best_score = .0
best_pipe = None
for model in models:
    pipe = Pipeline(steps=[
            ('preprocessor', preprocessor),
            ('classifier', model)
    ])
    score = cross_val_score(pipe, X, y, cv=4, scoring='accuracy')
    print(f'model: {type(model).__name__}, acc_mean: {score.mean():.4f}, acc_std: {score.std():.4f}')
if score.mean() > best_score:
    best_score = score.mean()
    best_pipe = pipe
            
print(f'best model: {type(best_pipe.named_steps["classifier"]).__name__}, accuracy: {best_score:.4f}')
joblib.dump(best_pipe, 'loan_pipe.pkl')

with open(pickle_filename, 'wb') as file:
    pickle.dump(best_pipe, file)